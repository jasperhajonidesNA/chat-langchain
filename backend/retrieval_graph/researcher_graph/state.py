"""State management for the researcher graph.

This module defines the state structures used in the researcher graph.
"""

from dataclasses import dataclass, field
from typing import Annotated, Literal

from langchain_core.documents import Document

from backend.utils import reduce_docs


@dataclass(kw_only=True)
class SubQuery:
    """Represents a sub-query with its methodology assignment."""
    
    question: str
    """The sub-query question."""
    rationale: str
    """Why this sub-question matters."""
    methodology: Literal["footprint", "nature_sense", "nrevx", "unmanaged_risk", "nature_risk"]
    """The methodology to use for answering this sub-query."""


@dataclass(kw_only=True)
class SubQueryState:
    """Private state for individual sub-query processing."""

    sub_query: SubQuery
    """The sub-query to process."""
    methodology_response: str = ""
    """Response from the methodology expert."""


@dataclass(kw_only=True)
class ResearcherState:
    """State of the researcher graph / agent."""

    question: str
    """A step in the research plan generated by the retriever agent."""
    sub_queries: list[SubQuery] = field(default_factory=list)
    """List of sub-queries with their assigned methodologies."""
    methodology_responses: Annotated[list[str], lambda left, right: left + right] = field(default_factory=list)
    """Responses from methodology experts that will be used as context."""
    documents: Annotated[list[Document], reduce_docs] = field(default_factory=list)
    """Populated by methodology experts. This is a list of documents that the agent can reference."""
